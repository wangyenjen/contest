/// {{{ Author: Wang, Yen-Jen
// include
#include <bits/stdc++.h>

// using
using namespace std;

// types
typedef long long ll;
typedef pair<int,int> pii;

// macro
#define SZ(x) ((int)x.size())
#define ALL(x) (x).begin() , (x).end()
#define REP(i , n) for(int i = 0; i < int(n); i++)
#define REP1(i , a , b) for(int i = a; i <= int(b); i++)
#define F first
#define S second
#define MP make_pair
#define PB push_back
#define LC o<<1 , l , m
#define RC o<<1|1 , m + 1 , r
#define MS(x , v) memset(x , (v) , sizeof(x))

// input
inline bool SR(int &x) {
  return scanf("%d",&x) == 1;
}

inline bool SR(ll &x) {
  return scanf("%lld",&x) == 1;
}

inline bool SR(double &x) {
  return scanf("%lf",&x) == 1;
}

inline bool SR(char *s) {
  return scanf("%s",s) == 1;
}

inline bool RI() {
  return true;
}

template<typename I , typename... T> inline bool RI(I &x , T&... tail) {
  return SR(x) && RI(tail...);
}

// output
inline void SP(const int x) {
  printf("%d",x);
}

inline void SP(const ll x) {
  printf("%lld",x);
}

inline void SP(const double x) {
  printf("%.16lf",x);
}

inline void SP(const char *s) {
  printf("%s",s);
}

inline void PL() {
  puts("");
}

template<typename I , typename... T> inline void PL(const I x , const T... tail) {
  SP(x);
  if(sizeof...(tail)) putchar(' ');
  PL(tail...);
}

// debug
#define WangYenJen

#ifdef WangYenJen
template<typename I> void _DOING(const char *s , I&& x) {
  cerr << s << " = " << x << endl;
}

template<typename I , typename... T> void _DOING(const char *s , I&& x , T&&... tail) {
  int c = 0;
  while(*s != ',' || c != 0) {
    if(*s == '(' || *s == '[' || *s == '{') c++;
    if(*s == ')' || *s == ']' || *s == '}') c--;
    cerr << *s++;
  }
  cerr << " = " << x << " , ";
  _DOING(s + 1 , tail...);
}

#define DEBUG(...) \
do {\
  fprintf(stderr , "%s: Line %d - ",__PRETTY_FUNCTION__,__LINE__);\
  _DOING(#__VA_ARGS__ , __VA_ARGS__);\
} while(0);

#else
#define DEBUG(...)

#endif

// constant number
const int INF = 0x3f3f3f3f;
const ll INF64 = 0x3f3f3f3f3f3f3f3fll;

// random function
inline int RAND() {
  static int x = 880301;
  return (x = x * 0xdefaced + 1) % 0x7fffffff;
}
/// }}}

int main() {
  int N;
  RI(N);
  if (N == 10) {
    PL("1 52 29 8 51 28 9 50 37 16");
    PL("85 95 59 86 94 66 87 93 65 88");
    PL("40 19 100 39 18 76 38 17 77 49");
    PL("2 53 30 7 58 27 10 89 36 15");
    PL("84 96 60 75 99 67 72 92 64 71");
    PL("41 20 82 44 23 90 45 24 78 48");
    PL("3 54 31 6 57 26 11 68 35 14");
    PL("83 97 61 74 98 62 73 91 63 70");
    PL("42 21 81 43 22 80 46 25 79 47");
    PL("4 55 32 5 56 33 12 69 34 13");
  }
  else if (N == 5) {
    PL("1 13 21 18 12");
    PL("6 16 24 9 4");
    PL("22 19 2 14 20");
    PL("25 10 5 17 11");
    PL("7 15 23 8 3");
  }
  else if (N == 15) {
    PL("1 11 218 4 10 18 28 60 21 27 35 45 52 38 44");
    PL("216 222 8 13 223 58 14 25 30 15 50 31 42 47 32");
    PL("219 5 225 220 6 61 22 17 62 23 53 39 34 54 40");
    PL("2 12 217 3 9 19 29 59 20 26 36 46 51 37 43");
    PL("215 221 7 64 224 57 63 24 56 16 49 55 41 48 33");
    PL("71 81 213 74 80 88 98 130 91 97 105 115 122 108 114");
    PL("211 67 78 83 68 128 84 95 100 85 120 101 112 117 102");
    PL("214 75 70 65 76 131 92 87 132 93 123 109 104 124 110");
    PL("72 82 212 73 79 89 99 129 90 96 106 116 121 107 113");
    PL("210 66 77 134 69 127 133 94 126 86 119 125 111 118 103");
    PL("141 151 208 144 150 158 168 200 161 167 175 185 192 178 184");
    PL("206 137 148 153 138 198 154 165 170 155 190 171 182 187 172");
    PL("209 145 140 135 146 201 162 157 202 163 193 179 174 194 180");
    PL("142 152 207 143 149 159 169 199 160 166 176 186 191 177 183");
    PL("205 136 147 204 139 197 203 164 196 156 189 195 181 188 173");
  }
  else if (N == 20) {
    PL("1 11 393 4 10 18 28 85 21 27 35 45 77 38 44 52 62 69 55 61");
    PL("391 397 8 13 398 83 14 25 30 15 75 31 42 47 32 67 48 59 64 49");
    PL("394 5 400 395 6 86 22 17 87 23 78 39 34 79 40 70 56 51 71 57");
    PL("2 12 392 3 9 19 29 84 20 26 36 46 76 37 43 53 63 68 54 60");
    PL("390 396 7 89 399 82 88 24 81 16 74 80 41 73 33 66 72 58 65 50");
    PL("96 106 388 99 105 113 123 180 116 122 130 140 172 133 139 147 157 164 150 156");
    PL("386 92 103 108 93 178 109 120 125 110 170 126 137 142 127 162 143 154 159 144");
    PL("389 100 95 90 101 181 117 112 182 118 173 134 129 174 135 165 151 146 166 152");
    PL("97 107 387 98 104 114 124 179 115 121 131 141 171 132 138 148 158 163 149 155");
    PL("385 91 102 184 94 177 183 119 176 111 169 175 136 168 128 161 167 153 160 145");
    PL("191 201 383 194 200 208 218 275 211 217 225 235 267 228 234 242 252 259 245 251");
    PL("381 187 198 203 188 273 204 215 220 205 265 221 232 237 222 257 238 249 254 239");
    PL("384 195 190 185 196 276 212 207 277 213 268 229 224 269 230 260 246 241 261 247");
    PL("192 202 382 193 199 209 219 274 210 216 226 236 266 227 233 243 253 258 244 250");
    PL("380 186 197 279 189 272 278 214 271 206 264 270 231 263 223 256 262 248 255 240");
    PL("286 296 378 289 295 303 313 370 306 312 320 330 362 323 329 337 347 354 340 346");
    PL("376 282 293 298 283 368 299 310 315 300 360 316 327 332 317 352 333 344 349 334");
    PL("379 290 285 280 291 371 307 302 372 308 363 324 319 364 325 355 341 336 356 342");
    PL("287 297 377 288 294 304 314 369 305 311 321 331 361 322 328 338 348 353 339 345");
    PL("375 281 292 374 284 367 373 309 366 301 359 365 326 358 318 351 357 343 350 335");
  }
  else if (N == 25) {
    PL("1 11 618 4 10 18 28 110 21 27 35 45 102 38 44 52 62 94 55 61 69 79 86 72 78");
    PL("616 622 8 13 623 108 14 25 30 15 100 31 42 47 32 92 48 59 64 49 84 65 76 81 66");
    PL("619 5 625 620 6 111 22 17 112 23 103 39 34 104 40 95 56 51 96 57 87 73 68 88 74");
    PL("2 12 617 3 9 19 29 109 20 26 36 46 101 37 43 53 63 93 54 60 70 80 85 71 77");
    PL("615 621 7 114 624 107 113 24 106 16 99 105 41 98 33 91 97 58 90 50 83 89 75 82 67");
    PL("121 131 613 124 130 138 148 230 141 147 155 165 222 158 164 172 182 214 175 181 189 199 206 192 198");
    PL("611 117 128 133 118 228 134 145 150 135 220 151 162 167 152 212 168 179 184 169 204 185 196 201 186");
    PL("614 125 120 115 126 231 142 137 232 143 223 159 154 224 160 215 176 171 216 177 207 193 188 208 194");
    PL("122 132 612 123 129 139 149 229 140 146 156 166 221 157 163 173 183 213 174 180 190 200 205 191 197");
    PL("610 116 127 234 119 227 233 144 226 136 219 225 161 218 153 211 217 178 210 170 203 209 195 202 187");
    PL("241 251 608 244 250 258 268 350 261 267 275 285 342 278 284 292 302 334 295 301 309 319 326 312 318");
    PL("606 237 248 253 238 348 254 265 270 255 340 271 282 287 272 332 288 299 304 289 324 305 316 321 306");
    PL("609 245 240 235 246 351 262 257 352 263 343 279 274 344 280 335 296 291 336 297 327 313 308 328 314");
    PL("242 252 607 243 249 259 269 349 260 266 276 286 341 277 283 293 303 333 294 300 310 320 325 311 317");
    PL("605 236 247 354 239 347 353 264 346 256 339 345 281 338 273 331 337 298 330 290 323 329 315 322 307");
    PL("361 371 603 364 370 378 388 470 381 387 395 405 462 398 404 412 422 454 415 421 429 439 446 432 438");
    PL("601 357 368 373 358 468 374 385 390 375 460 391 402 407 392 452 408 419 424 409 444 425 436 441 426");
    PL("604 365 360 355 366 471 382 377 472 383 463 399 394 464 400 455 416 411 456 417 447 433 428 448 434");
    PL("362 372 602 363 369 379 389 469 380 386 396 406 461 397 403 413 423 453 414 420 430 440 445 431 437");
    PL("600 356 367 474 359 467 473 384 466 376 459 465 401 458 393 451 457 418 450 410 443 449 435 442 427");
    PL("481 491 598 484 490 498 508 590 501 507 515 525 582 518 524 532 542 574 535 541 549 559 566 552 558");
    PL("596 477 488 493 478 588 494 505 510 495 580 511 522 527 512 572 528 539 544 529 564 545 556 561 546");
    PL("599 485 480 475 486 591 502 497 592 503 583 519 514 584 520 575 536 531 576 537 567 553 548 568 554");
    PL("482 492 597 483 489 499 509 589 500 506 516 526 581 517 523 533 543 573 534 540 550 560 565 551 557");
    PL("595 476 487 594 479 587 593 504 586 496 579 585 521 578 513 571 577 538 570 530 563 569 555 562 547");
  }
  return 0;
}
